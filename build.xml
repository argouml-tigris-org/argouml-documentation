<?xml version="1.0"?>
<!-- $Id$ -->
<!-- ArgoUML Manuals & Documentation Build file                             -->
<!-- Author: Kunle Odutola  31-March-2001                                   -->
<!--                                                                        -->
<!-- Modified: Jeremy Bennett, Thierry Lach, Linus Tolke, Dave Thompson     -->
<!-- 

About this file
===============

This file is the build file for ArgoUML Manuals & Quick Guide. This
build file is designed to be read by ANT. See http://jakarta.apache.org/ant/

What tools do I need to use this build file?

  The source repository contains most of the tools you needs:
  - Tool 'Ant'
  - The ArgoUML documentation source files (.xml).
  - Norman Walsh's DocBook system.
  - Tool 'FOP' (only requred for pdf versions)
  
  In addition to tbe above you will need:
  - The Java 2 SDK.

  If you are going to build pdf versions you also need:
  - JIMI (see the fop readme file).

  To run the build in Windows:
  
  > build.bat
  
  To run the build in Linux/Unix/Cygwin/(+Mac?):
  
  $ ./build.sh
  
  This will run the default target which generates the user manual and quick guide
  in all languages, in the multi-page 'chunked' html format only.
 -->

<project name="ArgoDocs" default="defaulthtml" basedir=".">

  <property name="argo.core.version" value="PRE-0.27.2"/>

  <!-- we really need an absolute path for argo.root.dir -->
  <property name="argo.root.dir" value="${basedir}/../.."/>
	
  <!-- 
      Default master list of languages to generate (comma separated).
      The languages listed must use the same codes as found in
      src/docbook-setup/docbook-xsl/common/l10n.xml 
  -->
  <property name="doc.languages.list" value="en,de"/>
  
  <property name="build.dir" value="build"/>
  <property name="tools.dir" value="tools"/>
                                                            
  <property name="tools.lib" value="${tools.dir}/lib"/>

  <!-- Our defaults depend on and don't override main props, so they go 2nd -->

  <property name="fop.version" value="fop-0.20.5"/>
  <property name="fop.build.dir" value="${tools.dir}/${fop.version}/build"/>
  <property name="fop.lib.dir" value="${tools.dir}/${fop.version}/lib"/>

  <property name="docbook-xsl-version" value="1.69.1"/>

  <property name="saxon.jar.path" value="${tools.lib}/saxon-6.5.2.jar"/>
  <property name="jimi.jar.path" value="${tools.lib}/JimiProClasses.zip"/>

  <!-- Define in build.properties to skip production of individual manuals -->
  <!-- <property name="skip-quickguide" value="true"/> -->
  <!-- <property name="skip-argomanual" value="true"/> -->

  <property name="docbook-setup" value="src/docbook-setup"/>

  <property name="docbook-xsl-root" 
	    value="${docbook-setup}/docbook-xsl"/>
  <property name="docbook-xsl-source-url"
            value="${docbook-xsl-source-url-base}docbook-xsl-${docbook-xsl-version}.zip"/>

  <!-- allows us to use the 'for' task from lib/ant-contrib, 
  required for looping through the languages -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
	<classpath>
	  <pathelement location="${tools.lib}/ant-contrib-0.6.jar"/>
	</classpath>
  </taskdef>

  <echo> "${fop.build.dir}"</echo>
  <echo> "${saxon.jar.path}"</echo>
  <path id="saxon.classpath">
    <pathelement location="${saxon.jar.path}" />
  </path>

  <target name="init">
    <echo message="Using ${ant.version}"/>

    <available property="jimi-is-available"
               value="true"
	       classname="com.sun.jimi.core.Jimi">
        <classpath>
            <pathelement location="${jimi.jar.path}" />
	</classpath>
    </available>

    <echo message="Checking for docbook-xsl version ${docbook-xsl-version}"/>
    <xmlproperty file="${docbook-xsl-root}/VERSION" prefix="scratch" />
    <condition property="docbook-xsl-is-available">
        <equals arg1="${scratch.xsl:stylesheet.fm:project.fm:Version}"
                arg2="${docbook-xsl-version}"
         />
    </condition>

  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build directory                                        -->
  <!-- =================================================================== -->

  <target name="prepare" depends="init">
    <mkdir dir="${build.dir}"/>
  </target>
  
  <!-- =================================================================== -->
  <!-- defaulthtml: Create default HTML documentation                      -->
  <!-- =================================================================== -->

  <target name="defaulthtml" depends="prepare"
          description="Create documents in .../defaulthtml (chunked).">
    <!-- Set switch for create-defaulthtml target to ensure that it runs -->
    <property name="generate-defaulthtml" value="true" />
    <!-- Call "internal-scheduler" target to start the process -->
    <antcall target="internal-scheduler"/>    
  </target>

  <!-- =================================================================== -->
  <!-- printablehtml: Create printable HTML documentation                  -->
  <!-- =================================================================== -->

  <target name="printablehtml" depends="prepare"
          description="Create documents in .../printablehtml (one big file).">
    <!-- Set switch for create-printablehtml target to ensure that it runs -->
    <property name="generate-printablehtml" value="true" />
    <!-- Call "internal-scheduler" target to start the process -->
    <antcall target="internal-scheduler"/>    
  </target>
  

  <!-- =================================================================== -->
  <!-- javahelp: Create javahelp documentation                             -->
  <!-- =================================================================== -->

  <target name="javahelp" depends="prepare"
          description="Create javahelp documentation (currently not working).">
    <!-- Set switch for "create-javahelp" target to ensure that it runs -->
    <property name="generate-javahelp" value="true" />
    <!-- Call "internal-scheduler" target to start the process -->
    <antcall target="internal-scheduler"/>          
  </target>
  

  <!-- =================================================================== -->
  <!-- javahelp: Download jimi                                             -->
  <!-- =================================================================== -->

  <target name="jimi-check" depends="prepare" unless="jimi-is-available">
      <echo message="Jimi is not available.">

The Jimi file is not available. The pdf result will be poor since
most of the images cannot be included and you will get several
[fop] [ERROR]:-messages.

Please refer to the readme file in the tools/fop-0.20.3
directory for further information.

      </echo>
  </target>

  <target name="jimi-get" depends="prepare" unless="jimi-is-available">
    <!-- We are missing an URL for this. -->
    <get src="http://where.ever.jimi/is/residing/jimi-1.0.jar"
         dest="${jimi.jar.path}"
	 usetimestamp="true"
	 verbose="false"
	 ignoreerrors="true"/>

    <!-- Alternative solution:
    <get src="http://where.ever.jimi/is/residing/jimi-1.0.tar.Z"
         dest="${jimi.jar.path}"
	 usetimestamp="true"
	 verbose="false"
	 ignoreerrors="true"/>
    <unpack/>
    <build/>
    <move/>
     -->

    <!-- Check availability again - if the get worked, it will be there. -->
    <available file="${jimi.jar.path}" property="jimi-is-available"/>
  </target>


  <!-- =================================================================== -->
  <!-- docbook-xsl-check: Check for docbook                                -->
  <!-- =================================================================== -->

  <target name="docbook-xsl-check" depends="prepare"
          unless="docbook-xsl-is-available">
      <fail message="${docbook-xsl-root} is not available.">

The docbook-xsl package is not available or is not the correct version. 
It is not possible to generate the documentation without it.

Please try updating your working copy.
          
      </fail>
  </target>


  <!-- =================================================================== -->
  <!-- pdf: Create PDF documentation                                       -->
  <!-- =================================================================== -->

  <target name="pdf" depends="prepare"
          description="Create the pdf version of all documents (in .../pdf).">
    <!-- Set switch for "create-pdf" target to ensure that it runs -->
    <property name="generate-pdf" value="true" />
    <!-- Call "internal-scheduler" target to start the process -->
    <antcall target="internal-scheduler"/>          
  </target>
  
  <!-- =================================================================== -->
  <!-- docs: Generates pdf and html documentation                          -->
  <!-- =================================================================== -->

  <target name="docs" depends="prepare"
          description="Create all versions of all documents.">
    <!-- Set switch for pdf, defaulthtml and printablehtml builders       -->
    <property name="generate-defaulthtml" value="true" />
    <property name="generate-printablehtml" value="true" />
    <property name="generate-pdf" value="true" />
    <!-- Call "internal-scheduler" target to start the process -->
    <antcall target="internal-scheduler"/>    
  </target>
  
  <!-- =================================================================== -->
  <!-- internal-scheduler: Contains the definition of all the documents    -->
  <!--   that could possibly be built in this system.    -->
  <!--                                                                     -->
  <!--   Its function is to pass the details of the documents that it      -->
  <!--   knows to the target named "internal-dispatcher" one-at-a-time.    -->
  <!--                                                                     -->
  <!--   This is where the details of new documents are added and details  -->
  <!--   of old documents removed.                                         -->
  <!-- =================================================================== -->

  <target name="internal-scheduler">

    <antcall target="docbook-xsl-check"/>

    <!-- First we set up some properties to make our job easier     -->

    <property name="profile.xsl"
              value="${docbook-setup}/docbook-xsl/profiling/profile.xsl"/>
              
    <property name="chunked.xsl"
              value="${docbook-setup}/create-chunked.xsl"/>

    <property name="printable.xsl"
              value="${docbook-setup}/create-printable.xsl"/>

    <property name="pdf.xsl"
              value="${docbook-setup}/create-pdf.xsl"/>

    <property name="preprocess-pdf.xsl"
              value="${docbook-setup}/preprocess-pdf.xsl"/>

    <property name="javahelp.xsl"
              value="${docbook-setup}/create-javahelp.xsl"/>

    <property name="titlepage-template.xsl"
              value="${docbook-setup}/docbook-xsl/template/titlepage.xsl"/>

    <property name="titlepage-html.spec.xml"
              value="${docbook-setup}/titlepage-html.spec.xml"/>

    <property name="titlepage-html.xsl"
              value="${docbook-setup}/titlepage-html.xsl"/>

    <property name="titlepage-pdf.spec.xml"
              value="${docbook-setup}/titlepage-pdf.spec.xml"/>

    <property name="titlepage-pdf.xsl"
              value="${docbook-setup}/titlepage-pdf.xsl"/>

    <!-- Generate custom titlepage stylesheets -->
    <echo message="Generating custom HTML titlepage XSL template"/>
    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
      taskname="saxon"
          dir=".">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg line="-o '${titlepage-html.xsl}'"/>
      <arg value="${titlepage-html.spec.xml}"/>
      <arg value="${titlepage-template.xsl}"/>
    </java>

    <echo message="Generating custom PDF titlepage XSL template"/>
    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
      taskname="saxon"
          dir=".">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg line="-o '${titlepage-pdf.xsl}'"/>
      <arg value="${titlepage-pdf.spec.xml}"/>
      <arg value="${titlepage-template.xsl}"/>
    </java>
    
    <!-- Copy and change 'antcall' task below for additional DocBook
         documents

         <antcall target="internal-dispatcher">    
           <param name="doc.subdir"  value="javahelp"/>
           <param name="doc.prefix"  value="javahelp"/>
         </antcall>  -->

    <for list="${doc.languages.list}" param="lang">
  	  <sequential>
  	    <!-- The quick guide -->
        <antcall target="internal-dispatcher">
          <!-- sub-dir of 'documentation' with xml file -->
          <param name="doc.subdir"  value="quick-guide"/>
          <!-- DocBook filename without xml extension   -->
          <param name="doc.prefix"  value="quickguide"/>
          <!-- language to generate -->
          <param name="doc.lang" value="@{lang}"/>
        </antcall>
    
        <!-- The user manual -->
        <antcall target="internal-dispatcher">
          <!-- sub-dir of 'documentation' with xml file -->
          <param name="doc.subdir"  value="manual"/>
          <!-- DocBook filename without xml extension   -->
          <param name="doc.prefix"  value="argomanual"/>
          <!-- language to generate -->
          <param name="doc.lang" value="@{lang}"/>
        </antcall>
  	  </sequential>
    </for>
    	

    <delete file="${titlepage-html.xsl}"/>
    <delete file="${titlepage-pdf.xsl}"/>

  </target>
  
  <!-- =================================================================== -->
  <!-- internal-dispatcher: Sets up the correct environment for building   -->
  <!--   the documents and them dispatches the request to build to each    -->
  <!--   of the following targets:                                         -->
  <!--     create-defaulthtml:   for multi-page HTML                       -->
  <!--     create-printablehtml: for single-page HTML                      -->
  <!--     create-pdf:           for PDF output                            -->
  <!--                                                                     -->
  <!--   Each target is driven by a switch set in the top level target     -->
  <!--   that the user invoked.                                            -->
  <!--                                                                     -->
  <!--   This target does the following:                                   -->
  <!--     b. copies the used 'images' dir to 'source' dir                 -->
  <!--     c. calls 'create-XXXX' targets sequentially                     -->
  <!--     d. removes the previously copied 'images' dir                   -->
  <!--     e. removes the generated file                                   -->
  <!-- =================================================================== -->

  <target name="internal-dispatcher" unless="skip-${doc.prefix}">

    <!-- We generate a property file. -->
    <copy file="src/${doc.subdir}/${doc.prefix}.xml"
          tofile="src/${doc.subdir}/${doc.prefix}-generated.xml">
      <filterset>
        <filter token="VERSION" value="${argo.core.version}"/>
      </filterset>
    </copy>

    <echo message="Profiling for language '${doc.lang}'"/>

    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir=".">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg line="-o 'src/${doc.subdir}/${doc.prefix}-generated-${doc.lang}.xml'"/>
      <arg value="src/${doc.subdir}/${doc.prefix}-generated.xml"/>
      <arg value="${profile.xsl}"/>
      <arg value="profile.lang=${doc.lang}"/>
    </java>

    <!-- Now invoke each of the targets. They will only do anything if their
         trigger (generate-XXX) has been set true earlier. -->

    <antcall target="create-defaulthtml">     
      <param name="source.dir"  value="src/${doc.subdir}"/>
      <param name="source.xml"  value="src/${doc.subdir}/${doc.prefix}-generated-${doc.lang}.xml"/>
      <param name="source.xsl"  value="${chunked.xsl}"/>
      <param name="target.dir"  value="${build.dir}/${doc.lang}/defaulthtml/${doc.subdir}"/>
    </antcall>

    <antcall target="create-printablehtml">   
      <param name="source.dir"  value="src/${doc.subdir}"/>
      <param name="source.xml"  value="src/${doc.subdir}/${doc.prefix}-generated-${doc.lang}.xml"/>
      <param name="source.xsl"  value="${printable.xsl}"/>
      <param name="target.dir"  value="${build.dir}/${doc.lang}/printablehtml/${doc.subdir}"/>
      <param name="target.html" value="${doc.prefix}.html"/>
    </antcall>

    <antcall target="create-pdf">     
      <param name="source.dir"  value="src/${doc.subdir}"/>
      <param name="source.xml"  value="src/${doc.subdir}/${doc.prefix}-generated-${doc.lang}.xml"/>
      <param name="source.xsl"  value="${pdf.xsl}"/>
      <param name="preprocess.xsl"  value="${preprocess-pdf.xsl}"/>
      <param name="source.fo"   value="${doc.prefix}.fo"/>
      <param name="target.dir"  value="${build.dir}/${doc.lang}/pdf/${doc.subdir}"/>
      <param name="target.pdf"  value="${doc.prefix}.pdf"/>
    </antcall>

    <antcall target="create-javahelp">        
      <param name="source.dir"  value="src/${doc.subdir}"/>
      <param name="source.xml"  value="src/${doc.subdir}/${doc.prefix}-generated-${doc.lang}.xml"/>
      <param name="source.xsl"  value="${javahelp.xsl}"/>
      <param name="source.fo"   value="${doc.prefix}.fo"/>
      <param name="target.dir"  value="${build.dir}/${doc.lang}/javahelp/${doc.subdir}"/>
      <param name="target.javahelp"  value="${doc.prefix}.jh"/>
      <param name="target.jar"  value="${doc.subdir}.jar"/>
      <param name="target.hs"  value="${doc.subdir}.hs"/>
    </antcall>

    <delete file="src/${doc.subdir}/${doc.prefix}-generated.xml"/>
    <delete file="src/${doc.subdir}/${doc.prefix}-generated-${doc.lang}.xml"/>
  </target>
  
  <!-- =================================================================== -->
  <!-- create-defaulthtml: Generates the online, paged html documentation  -->
  <!-- =================================================================== -->

  <target name="create-defaulthtml" if="generate-defaulthtml">
    <mkdir dir="${target.dir}"/>

    <!-- Watch for the nasty - the base.dir MUST have a trailing / -->

    <echo message="Building chunked HTML for ${source.xml}..."/>

    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir=".">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg value="${source.xml}"/>
      <arg value="${source.xsl}"/>
      <arg value="base.dir=${target.dir}/"/>
      <arg value="l10n.gentext.default.language=${doc.lang}" />    
    </java>

    <!-- Delete spurious ld-*.html files created in the source directory. -->

    <delete>
      <fileset dir="${source.dir}" includes="ld-*.html" /> 
    </delete>

    <!-- Copy remaining stylesheets, images and static HTML also    -->

    <copy todir="${target.dir}">
      <fileset dir="${source.dir}" includes="*.html,*.css,images/**" /> 
    </copy>
  </target>
  
  <!-- =================================================================== -->
  <!-- create-printablehtml: Generates the printable html documentation    -->
  <!-- =================================================================== -->

  <target name="create-printablehtml" if="generate-printablehtml">
    <mkdir dir="${target.dir}"/>

    <echo message="Building single file HTML for ${source.xml}..."/>

    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir=".">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg line="-o '${target.dir}/${target.html}'"/>
      <arg value="${source.xml}"/>
      <arg value="${source.xsl}"/>
      <arg value="l10n.gentext.default.language=${doc.lang}" />    
    </java>

    <!-- Delete spurious ld-*.html files created in the source directory. -->

    <delete>
      <fileset dir="${source.dir}" includes="ld-*.html" /> 
    </delete>

    <copy todir="${target.dir}">
      <fileset dir="${source.dir}" includes="*.html,*.css,images/**" />
    </copy>
  </target>
  
  <!-- =================================================================== -->
  <!-- create-pdf: Generates the pdf documentation       -->
  <!-- =================================================================== -->

  <target name="create-pdf" if="generate-pdf">
    <mkdir dir="${target.dir}"/>

    <!-- This could be an idea if jimi-1.0.jar were available anywhere.
      <antcall target="jimi-get"/>
     -->

    <echo message="Building Formatting Objects for ${source.xml}..."/>
    <antcall target="jimi-check"/>

    <!-- preprocess the document for fop 0.20.5:
         execute the stylesheet preprocess-pdf.xsl in docbook-setup/
         on the xml source
         The output is written to ${source.xml}.prep, which is
         picked up by the next step in the processing chain.
      -->
    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir=".">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg line='-o "${source.xml}.prep"'/>
      <arg value="${source.xml}"/>
      <arg value="${preprocess.xsl}"/>
    </java>


    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir=".">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg line='-o "${source.dir}/${source.fo}"'/>
      <arg value="${source.xml}.prep"/>
      <arg value="${source.xsl}"/>
      <arg value="l10n.gentext.default.language=${doc.lang}" />    
    </java>
  	
    <!-- Invoke Fop on our terms. This is the only place we need more memory
         (for the user manual), so we invoke as a forked process with a bigger
         VM.

         You should check that the classpath reflects the library of the Fop
         build you are using (which should be copied in to $ARGO_HOME/lib).

         To process the PNG images in the manual, you will need to have built
         Fop from source using the Jimi library in your classpath, and also
         place a jar of the Jimi library (jimi-1.0.jar) in the
	 $ARGO_TOOLS/lib directory. If you don't do this, Fop
	 will complain each time it encounters a PNG image, and they will
	 not be included in the output. -->

    <echo message="Building PDF for ${source.dir}/${source.fo}..."/>

    <java classname="org.apache.fop.apps.Fop"
          maxmemory="176M"
          fork="yes"
	  taskname="fop"
          dir=".">
      <classpath>
        <pathelement location="${jimi.jar.path}"/>
        <pathelement location="${fop.build.dir}/fop.jar"/>
      	<pathelement location="${fop.lib.dir}/avalon-framework-cvs-20020806.jar"/>
        <pathelement location="${fop.lib.dir}/batik.jar"/>
        <pathelement location="${fop.lib.dir}/xalan-2.4.1.jar"/>
        <pathelement location="${fop.lib.dir}/xml-apis.jar"/>
        <pathelement location="${xerces.jar.path}"/>         
      </classpath>
      <!-- Idea 1: Change the -q to -d when you are trouble-shooting. -->
      <arg value="-q"/>
      <arg line='-fo "${source.dir}/${source.fo}"'/>
      <arg line='-pdf "${target.dir}/${target.pdf}"'/>
    </java>

    <!-- Idea 2: Comment the delete out so you can look at the .fo file. -->
    <delete file="${source.dir}/${source.fo}"/>
    <delete file="${source.xml}.prep"/>
    <antcall target="jimi-check"/>

  </target>

  <!-- =================================================================== -->
  <!-- create-javahelp: Generates the javahelp documentation         -->
  <!-- =================================================================== -->

  <target name="create-javahelp" if="generate-javahelp">
    <mkdir dir="${target.dir}"/>

    <!-- Watch for the nasty - the base.dir MUST have a trailing / -->

    <echo message="Building JavaHelp for ${source.xml}..."/>

    <java classname="com.icl.saxon.StyleSheet"
          fork="yes"
	  taskname="saxon"
          dir=".">
      <classpath>
        <path refid="saxon.classpath"/>
      </classpath>
      <arg value="${source.xml}"/>
      <arg value="${javahelp.xsl}"/>
      <arg value="base.dir=${target.dir}/"/>
      <arg value="l10n.gentext.default.language=${doc.lang}" />    
    </java>

    <!-- Delete spurious ld-*.html files created in the source directory. -->

    <delete>
      <fileset dir="${source.dir}" includes="ld-*.html" /> 
    </delete>

    <!-- Copy remaining stylesheets, images and static HTML also    -->

    <copy todir="${target.dir}">
      <fileset dir="${source.dir}" includes="jhelp*,*.html,*.css,images/**" /> 
    </copy>

    <move file="${target.dir}/jhelpset.hs"
          tofile="${target.dir}/${target.hs}"/>

    <jar jarfile="${build.dir}/${target.jar}"
         basedir="${target.dir}"
         includes="**"
         excludes="*.jar"/>
  </target>
  
  
  <!-- =================================================================== -->
  <!-- Cleans up generated stuff                                           -->
  <!-- =================================================================== -->

  <target name="clean" depends="init"
          description="Remove the generated files.">
    <delete dir="${build.dir}"/>
  </target>
  
  <!-- =================================================================== -->
  <!-- Dummy target                                                        -->
  <!-- =================================================================== -->

  <target name="install" description="Do nothing."/>
  
</project>

